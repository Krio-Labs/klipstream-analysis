# Simple CPU-only Dockerfile for KlipStream Analysis
# This version focuses on getting the API deployed quickly

FROM python:3.10-slim

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    ffmpeg \
    git \
    wget \
    curl \
    unzip \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy CPU-specific requirements first for better caching
COPY requirements-cpu.txt .

# Upgrade pip
RUN python3 -m pip install --upgrade pip setuptools wheel

# Install Python dependencies (CPU-only versions)
RUN pip install torch==2.0.1+cpu torchvision==0.15.2+cpu torchaudio==2.0.2+cpu \
    --index-url https://download.pytorch.org/whl/cpu

# Install CPU-specific requirements (excludes conflicting packages)
RUN pip install -r requirements-cpu.txt

# Copy TwitchDownloaderCLI binaries from raw_pipeline/bin
COPY raw_pipeline/bin/TwitchDownloaderCLI /app/raw_pipeline/bin/TwitchDownloaderCLI
COPY raw_pipeline/bin/TwitchDownloaderCLI_mac /app/raw_pipeline/bin/TwitchDownloaderCLI_mac
COPY raw_pipeline/bin/TwitchDownloaderCLI.exe /app/raw_pipeline/bin/TwitchDownloaderCLI.exe
COPY raw_pipeline/bin/ffmpeg /app/raw_pipeline/bin/ffmpeg
COPY raw_pipeline/bin/ffmpeg_mac /app/raw_pipeline/bin/ffmpeg_mac
COPY raw_pipeline/bin/ffmpeg.exe /app/raw_pipeline/bin/ffmpeg.exe

# Make binaries executable
RUN chmod +x /app/raw_pipeline/bin/TwitchDownloaderCLI
RUN chmod +x /app/raw_pipeline/bin/TwitchDownloaderCLI_mac
RUN chmod +x /app/raw_pipeline/bin/ffmpeg
RUN chmod +x /app/raw_pipeline/bin/ffmpeg_mac

# Copy application code
COPY . /app/

# Copy simple health check script and startup script
COPY health_check_simple.py /app/health_check_simple.py
COPY start_api.py /app/start_api.py
RUN chmod +x /app/health_check_simple.py
RUN chmod +x /app/start_api.py

# CPU Transcription Configuration (Deepgram fallback)
ENV ENABLE_GPU_TRANSCRIPTION=false
ENV TRANSCRIPTION_METHOD=deepgram
ENV ENABLE_FALLBACK=true
ENV COST_OPTIMIZATION=true

# API Configuration
ENV FASTAPI_MODE=true
ENV API_VERSION=2.0.0
ENV ENABLE_ASYNC_API=true

# Cloud Environment Configuration
ENV CLOUD_ENVIRONMENT=true
ENV USE_CLOUD_STORAGE=true
ENV GCS_PROJECT_ID=klipstream

# Performance Configuration
ENV CHUNK_DURATION_MINUTES=10
ENV MAX_CONCURRENT_CHUNKS=4
ENV ENABLE_PERFORMANCE_METRICS=true

# Cloud Run Configuration
ENV CLOUD_RUN_TIMEOUT_SECONDS=3600
ENV MAX_FILE_SIZE_GB=2

# Create necessary directories
RUN mkdir -p /app/output/raw /app/output/analysis /app/output/transcripts /app/output/cost_tracking
RUN mkdir -p /tmp/chunks /tmp/models

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python3 /app/health_check_simple.py || exit 1

# Expose port
EXPOSE 8080

# Set user (Cloud Run requirement)
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# Start FastAPI server for Cloud Run
CMD ["python3", "/app/start_api.py"]
